---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/argoproj.io/application_v1alpha1.json
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: image-hosting
  annotations:
    argocd.argoproj.io/sync-wave: "10"
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  destination:
    server: "https://kubernetes.default.svc"
    namespace: selfhosted
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
    syncOptions:
      - CreateNamespace=true
  sources:
    - repoURL: "https://github.com/raypappa/homelab.git"
      path: kubernetes/main/apps/selfhosted/immich
      targetRevision: HEAD
      directory:
        recurse: true
        jsonnet: {}
    - repoURL: "https://cloudflare.github.io/helm-charts"
      targetRevision: 0.3.0
      chart: cloudflare-tunnel
      helm:
        valuesObject:
          image:
            # renovate: datasource=docker depName=cloudflare/cloudflared
            tag: 2024.10.1
          cloudflare:
            secretName: "immich-tunnel-credentials"
            tunnelName: "faerun-immich"
            ingress:
              - hostname: "immich.fieldsofbears.com"
                service: "http://immich-server-server.selfhosted.svc.cluster.local:3001"
    - repoURL: https://bjw-s.github.io/helm-charts
      chart: app-template
      targetRevision: 3.3.2
      helm:
        valuesObject:
          controllers:
            immich:
              type: deployment
              replicas: 1
              pod:
                labels:
                  db.home.arpa/pg: pg-home
                  prom.home.arpa/kps: allow
              containers:
                main:
                  image: &img
                    repository: ghcr.io/immich-app/immich-server
                    # renovate: datasource=docker depName=ghcr.io/immich-app/immich-server
                    tag: v1.112.1
                  command: &cmd ["tini", "--", "node", "/usr/src/app/dist/main"]
                  args: ["immich"]
                  env: &env
                    TZ: "${CONFIG_TZ}"
                    LD_PRELOAD: /usr/lib/x86_64-linux-gnu/libmimalloc.so.2
                    NODE_ENV: production
                    LOG_LEVEL: verbose
                    IMMICH_MEDIA_LOCATION: &pvc /data
                    IMMICH_METRICS: "true"
                    IMMICH_SERVER_URL: http://immich.immich.svc.cluster.local:3001
                    IMMICH_MACHINE_LEARNING_URL: http://immich-ml.immich.svc.cluster.local:3003
                    REDIS_HOSTNAME: immich-redis.immich.svc.cluster.local
                    REDIS_PORT: "6379"
                    DB_VECTOR_EXTENSION: pgvector # I couldn't really care less for worser machine learning, over half my library is screenshots
                    DB_URL:
                      valueFrom:
                        secretKeyRef:
                          name: pg-home-pguser-immich-fixed
                          key: pgbouncer-uri-sslmode
                  envFrom:
                    - secretRef:
                        name: immich-secrets
                  securityContext: &sc
                    readOnlyRootFilesystem: true
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                  resources:
                    requests:
                      cpu: "10m"
                      memory: "128Mi"
                    limits:
                      cpu: "3000m"
                      memory: "2Gi"
            microservices:
              type: deployment
              replicas: 3
              strategy: RollingUpdate
              rollingUpdate:
                unavailable: "90%"
              pod:
                labels:
                  db.home.arpa/pg: pg-home
                  prom.home.arpa/kps: allow
                securityContext:
                  runAsNonRoot: true
                  runAsUser: &uid 1001
                  runAsGroup: *uid
                  fsGroup: *uid
                  fsGroupChangePolicy: Always
                  supplementalGroups: [44, 104, 109, 128, 226] # GPU
                  seccompProfile: {type: "RuntimeDefault"}
                topologySpreadConstraints:
                  - maxSkew: 1
                    topologyKey: kubernetes.io/hostname
                    whenUnsatisfiable: DoNotSchedule
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: &app immich
                        app.kubernetes.io/instance: *app
                        app.kubernetes.io/component: microservices
              containers:
                main:
                  image: *img
                  command: *cmd
                  args: ["microservices"]
                  env: *env
                  securityContext: *sc
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "300Mi"
                      gpu.intel.com/i915: "1"
                    limits:
                      cpu: "1000m" # my machine will actually die
                      memory: "2Gi"
                      gpu.intel.com/i915: "1"
            ml:
              type: statefulset
              replicas: 3
              pod:
                labels:
                  db.home.arpa/pg: pg-home
                topologySpreadConstraints:
                  - maxSkew: 1
                    topologyKey: kubernetes.io/hostname
                    whenUnsatisfiable: DoNotSchedule
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: *app
                        app.kubernetes.io/instance: *app
                        app.kubernetes.io/component: ml
              containers:
                main:
                  image:
                    repository: ghcr.io/immich-app/immich-machine-learning
                    # renovate: datasource=docker depName=ghcr.io/immich-app/immich-machine-learning
                    tag: v1.103.1@sha256:708ff677ab952dda9d7cb9343a6d650a6ac02a4e6c7447015f9df95c780cfc42
                  env: *env
                  securityContext: *sc
                  resources:
                    requests:
                      cpu: "10m"
                      memory: "1Gi"
                    limits:
                      cpu: "1000m"
                      memory: "6Gi"
              statefulset:
                volumeClaimTemplates:
                  - name: data
                    size: 10Gi
                    storageClass: local
                    accessMode: ReadWriteOnce
                    globalMounts:
                      - path: /cache
            redis:
              type: deployment
              replicas: 1
              containers:
                redis:
                  image:
                    repository: "public.ecr.aws/docker/library/redis"
                    tag: "7.2.4@sha256:f14f42fc7e824b93c0e2fe3cdf42f68197ee0311c3d2e0235be37480b2e208e6"
                  command: # save and append-only options forcibly disable RDB and AOF persistence entirely
                    - "redis-server"
                    - "--save"
                    - "300 1"
                    - "--appendonly"
                    - "yes"
                  securityContext: *sc
                  resources:
                    requests:
                      cpu: "10m"
                      memory: "32Mi"
                    limits:
                      cpu: "1000m"
                      memory: "512Mi"
          service:
            immich:
              controller: immich
              ports:
                http:
                  port: 3001
                metrics:
                  port: 8081
            microservices:
              controller: microservices
              ports:
                metrics:
                  port: 8081
            ml:
              controller: ml
              ports:
                http:
                  port: 3003
            redis:
              controller: redis
              ports:
                http:
                  port: 6379
          persistence:
            data:
              enabled: true
              storageClass: ceph-filesystem
              accessMode: ReadWriteOncePod
              size: 200Gi
              advancedMounts:
                immich: &mount
                  main:
                    - subPath: data
                      path: *pvc
                microservices: *mount
                redis:
                  main:
                    - subPath: redis
                      path: /data
            misc:
              enabled: true
              storageClass: ceph-filesystem
              accessMode: ReadWriteOncePod
              size: 100Gi
              advancedMounts:
                immich: &misc
                  main:
                    - subPath: encodedvideo
                      path: /data/encoded-video
                    - subPath: thumbs
                      path: /data/thumbs
                microservices: *misc
            tmp:
              type: emptyDir
              medium: Memory
              globalMounts:
                - subPath: tmp
                  path: /tmp
                - subPath: geocode
                  path: /usr/src/app/.reverse-geocoding-dump
                - subPath: geoname
                  path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
                - subPath: transformers
                  path: /usr/src/app/.transformers_cache
            pg-ca:
              type: secret
              name: pg-home-ca
              defaultMode: 256
              globalMounts:
                - subPath: ca.crt
                  path: /secrets/pg/ca.crt
          defaultPodOptions:
            automountServiceAccountToken: false
            enableServiceLinks: false
            securityContext:
              runAsNonRoot: true
              runAsUser: &uid 1001
              runAsGroup: *uid
              fsGroup: *uid
              fsGroupChangePolicy: Always
              seccompProfile: {type: "RuntimeDefault"}
          networkpolicies:
            immich:
              podSelector: &sel
                matchLabels:
                  app.kubernetes.io/name: immich
              policyTypes: [Ingress, Egress]
              rules:
                ingress:
                  - from: [{podSelector: *sel}]
                egress:
                  - to: [{podSelector: *sel}]
          serviceMonitor:
            immich:
              serviceName: immich
              endpoints:
                - port: metrics
                  scheme: http
                  path: /metrics
                  interval: 1m
                  scrapeTimeout: 30s
            microservices:
              serviceName: microservices
              endpoints:
                - port: metrics
                  scheme: http
                  path: /metrics
                  interval: 1m
                  scrapeTimeout: 30s
