---
name: DNS
on: # yamllint disable-line rule:truthy
  schedule:
    - cron: "0 10 21 * *" # Runs on the 21st of every month at 10 AM UTC
  workflow_dispatch:
jobs:
  certbot:
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # apparently setting permissions is holistic rather than additive.
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Retrieve certificate from AWS Secrets Manager
        run: |
          first_domain=$(echo ${{ secrets.CERTBOT_DOMAINS }} | cut -d',' -f1)
          echo "::add-mask::${first_domain}-cert"
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${first_domain}-cert --query SecretString --output json)
          CERT_PATH="certbot-config/archive/${first_domain}"
          LIVE_PATH="certbot-config/live/${first_domain}"
          mkdir -p ${CERT_PATH} ${LIVE_PATH}
          echo "$SECRET_STRING" | jq -r .fullchain > ${CERT_PATH}/fullchain1.pem
          echo "$SECRET_STRING" | jq -r .private_key > ${CERT_PATH}/privkey1.pem
          echo "$SECRET_STRING" | jq -r .certificate_chain > ${CERT_PATH}/chain1.pem
          echo "$SECRET_STRING" | jq -r .certificate > ${CERT_PATH}/cert1.pem
          ln -s ${CERT_PATH}/fullchain1.pem ${LIVE_PATH}/fullchain.pem
          ln -s ${CERT_PATH}/privkey1.pem ${LIVE_PATH}/privkey.pem
          ln -s ${CERT_PATH}/chain1.pem ${LIVE_PATH}/chain.pem
          ln -s ${CERT_PATH}/cert1.pem ${LIVE_PATH}/cert.pem
      - name: Generate certificate
        uses: docker://certbot/dns-route53
        with:
          args: >
            certonly --non-interactive --agree-tos --email ${{ secrets.CERTBOT_EMAIL }} --dns-route53 --domains ${{ secrets.CERTBOT_DOMAINS }} --config-dir /github/workspace/certbot-config --work-dir /github/workspace/certbot-work --logs-dir /github/workspace/certbot-logs --keep-until-expiring --quiet

      - name: Fix file permissions
        uses: docker://certbot/dns-route53
        with:
          entrypoint: /bin/sh
          args: -c "chmod -R o+rwx /github/workspace/certbot-config"
      - name: debug
        run: |
          first_domain=$(echo ${{ secrets.CERTBOT_DOMAINS }} | cut -d',' -f1)
          echo "::add-mask::${first_domain}-cert"
          find certbot-config/live -ls
          find certbot-config/archive -ls
      - name: Upload certificate to AWS Secrets Manager
        run: |
          echo "::add-mask::$(aws sts get-caller-identity --query Account --output text)"
          first_domain=$(echo ${{ secrets.CERTBOT_DOMAINS }} | cut -d',' -f1)
          echo "::add-mask::${first_domain}-cert"
          CERT_PATH="certbot-config/archive/${first_domain}"
          FULLCHAIN=$(cat ${CERT_PATH}/fullchain1.pem)
          PRIVATE_KEY=$(cat ${CERT_PATH}/privkey1.pem)
          CERTIFICATE_CHAIN=$(cat ${CERT_PATH}/chain1.pem)
          CERTIFICATE=$(cat ${CERT_PATH}/cert1.pem)
          SECRET_STRING=$(jq -n --arg cert "$CERTIFICATE" --arg key "$PRIVATE_KEY" --arg chain "$CERTIFICATE_CHAIN" --arg fullchain $FULLCHAIN \
            '{certificate: $cert, private_key: $key, certificate_chain: $chain, fullchain: $fullchain}')
          aws secretsmanager update-secret --secret-id ${first_domain}-cert --secret-string "$SECRET_STRING"
      - name: Shred certificates
        run: shred -u certbot-config/archive/*/*
  deploy:
    needs: certbot
    runs-on: ${{ vars.RUNS_ON }}
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # apparently setting permissions is holistic rather than additive.
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      - name: arduino/setup-task
        uses: arduino/setup-task@v2.0.0
        with:
          version: ${{ vars.TASK_VERSION}}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.24"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - run: task configure
      - name: Setup SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          printf "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
      - name: SSH Test
        run: ssh ${{ vars.BASTION_USER }}@${{ vars.BASTION_HOST }} -p ${{ vars.BASTION_PORT }} echo "SSH Test"
      - uses: stoneydavis/ssh-port-forward-action@v1.0.1
        with:
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh_host: ${{ vars.BASTION_HOST }}
          ssh_port: ${{ vars.BASTION_PORT }}
          ssh_user: ${{ vars.BASTION_USER }}
          local_port: 6443
          remote_host: localhost
          remote_port: 6443
      - name: Ansible Canary
        run: task ansible:deploy:canary:ci -- -l panda.stoneydavis.lan
        env:
          BASTION_HOST: ${{ vars.BASTION_HOST }}
          BASTION_PORT: ${{ vars.BASTION_PORT }}
          BASTION_USER: ${{ vars.BASTION_USER }}
      # If package dependencies are not installed, the following task will fail. So we run in prod :D
      # - name: Ansible Diff
      #   run: task ansible:diff:ci
      #   env:
      #     BASTION_HOST: ${{ vars.BASTION_HOST}}
      #     BASTION_PORT: ${{ vars.BASTION_PORT}}
      #     AWS_REGION: ${{ vars.AWS_REGION}}
      #     AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      - name: Ansible Deploy
        run: task ansible:deploy:ci -- -l panda.stoneydavis.lan -t ssl
        env:
          BASTION_HOST: ${{ vars.BASTION_HOST}}
          BASTION_USER: ${{ vars.BASTION_USER }}
          BASTION_PORT: ${{ vars.BASTION_PORT}}
          AWS_REGION: ${{ vars.AWS_REGION}}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
        if: github.ref == 'refs/heads/main'
