---
# The singleton is any already running k3s controlplane node.  Mostly we
# just need to have the correct node token to use on any other control
# plane node, because we initialize everything on the first one and then
# all other control plane nodes will join on the running node for the
# initial setup.
#
# Otherwise they won't be able to communicate and you'd have three
# isolated control planes, not a single HA control plane.
- name: Create /etc/rancher/k3s/ directory
  ansible.builtin.file:
    path: /etc/rancher/k3s/
    state: directory
    mode: "0755"
- name: Copy Jinja template
  ansible.builtin.template:
    src: singleton.config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: "0644"
- name: Copy K3s service file
  register: k3s_service
  ansible.builtin.template:
    src: k3s.service.j2
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: "0644"
- name: Copy kubelet.config
  ansible.builtin.template:
    src: kubelet.config.j2
    dest: /etc/rancher/k3s/kubelet.config
    owner: root
    group: root
    mode: "0644"
- name: Enable and check K3s service
  any_errors_fatal: true
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true
- name: Wait for node-token
  ansible.builtin.wait_for:
    path: "{{ k3s_server_location }}/server/node-token"
- name: Register node-token file access mode
  ansible.builtin.stat:
    path: "{{ k3s_server_location }}/server/node-token"
  register: p
- name: Change file access node-token
  ansible.builtin.file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: g+rx,o+rx
- name: Read node-token from master
  ansible.builtin.slurp:
    path: "{{ k3s_server_location }}/server/node-token"
  register: node_token
- name: Store Master node-token and IP address
  ansible.builtin.set_fact:
    k3s_master_token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
    k3s_master_ip: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
- name: Restore node-token file access
  ansible.builtin.file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "{{ p.stat.mode }}"
- name: Create directory .kube
  ansible.builtin.file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: u=rwx,g=rx,o=
- name: Copy config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: true
    owner: "{{ ansible_user }}"
    mode: u=rw,g=,o=
# Update the namespace in the ~{{ ansible_user }}/.kube/config to argocd.
- name: Replace https://localhost:6443 by https://master-ip:6443
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default --server=https://{{ master_ip }}:6443 --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true
- name: Create kubectl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link
- name: Create crictl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link
- name: Create ArgoCD NameSpace
  become: false
  kubernetes.core.k8s:
    name: argocd
    kind: Namespace
    state: present
- name: Install ArgoCD
  block:
    - name: Create Deploy Key
      become: false
      community.crypto.openssh_keypair:
        path: ~/.ssh/id_ed25519
        type: ed25519
        mode: "0600"
    - name: Query ArgoCD service argocd-server
      set_fact:
        argocd_servers: "{{ query('kubernetes.core.k8s', kind='Deployment', namespace='argocd', resource_name='argocd-server') }}"
    - name: Apply ArgoCD Kustomize
      kubernetes.core.k8s:
        definition: "{{ lookup('kubernetes.core.kustomize', dir='https://gitlab.com/blade2005-2048/homelab.git/kubernetes/{{git_sub_path}}/bootstrap/argocd', enable_helm=True) }}"
      when: argocd_servers | length < 1
- name: Configure ArgoCD for the cluster
  ansible.builtin.command:
    cmd: argocd login --core
    creates: ~/.config/argocd/config
- name: Configure ArgoCD with SSH Key
  block:
    - name: List Configured Repositories in ArgoCD
      ansible.builtin.command: >-
        argocd repo list -o json
      register: argocd_repos
    # Note: This makes argocd able to use the above ssh key, but the ssh key still needs to be added by hand as a deploy key to the github repo.
    - name: Configure ArgoCD with SSH Key
      become: false
      ansible.builtin.command: >-
        argocd repo add "{{ k3s_git_repo }}" --ssh-private-key-path ~/.ssh/id_ed25519
      when: argocd_repos.stdout.find(k3s_git_repo)
